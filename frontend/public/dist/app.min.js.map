{"version":3,"sources":["app/app.ts","app/load_starting_info_service.ts","app/login_service.ts","home/home.ts","home/home_no_login.ts","home/home_with_login.ts","navbar/navbar_controller.ts","startPage/start_page.ts"],"names":["angular","module","config","$locationProvider","app","startloading","CurrentUser","StartLoadingService","$localStorage","$http","this","informationLoaded","loggedUserInfo","undefined","console","log","prototype","sleep","miliseconds","currentTime","Date","getTime","loadUserInfo","username","_this","url","get","then","response","data","service","loginservice","ResponseToken","token","LoginService","$cookies","$window","isLogged","loggedUser","checkIfLogged","getIsLogged","isLoggedLocalStorage","bearerCookie","checkTokenSync","http","XMLHttpRequest","open","setRequestHeader","send","status","login","user","stringUser","JSON","stringify","obtainedToken","parse","put","logout","remove","location","href","home","HomeCtrl","$scope","$routeProvider","when","templateUrl","controller","controllerAs","nolog","LoggingUser","password","HomeNoLogCtrl","growl","usernameLogin","passwordLogin","result","error","directive","withlog","HomeWithLogCtrl","navbar","NavbarCtrl","activePage","window","StartPageCtrl"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\n\nangular.module('imsFrontendApp', [\n    'app.home',\n    'app.home.nolog',\n    'app.home.withlog',\n    'app.loginservice',\n    'app.startloading',\n    'app.home.startpage',\n    'app.navbar',\n    'ngRoute'\n]).config(($locationProvider) => {\n    // $locationProvider.html5Mode(true);\n});","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.startloading {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class CurrentUser {\n        username: string;\n        name: string;\n        surname: string;\n        dateOfBirth: Date;\n        country: string;\n        city: string;\n        picture: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IStartLoadingService {\n        loadUserInfo(username: string): void;\n        loggedUserInfo: CurrentUser;\n        informationLoaded: boolean;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class StartLoadingService implements IStartLoadingService {\n\n        informationLoaded: boolean = false;\n\n        loggedUserInfo: app.startloading.CurrentUser = undefined;\n\n        constructor(public $localStorage, public $http) {\n            console.log('Creating StartLoadingService...');\n        }\n\n        sleep(miliseconds: number): void {\n            var currentTime = new Date().getTime();\n            while (currentTime + miliseconds >= new Date().getTime()) {\n            }\n            this.informationLoaded = true;\n        }\n\n        loadUserInfo(username: string): void {\n            let url = '/api/account/user?username=' + this.$localStorage.username;\n            console.log(url);\n            this.$http.get(url).then((response) => {\n                this.loggedUserInfo = response.data;\n                this.sleep(2000);\n            }, function (response) {\n                console.log('Error', response);\n            });\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.startloading', [])\n        .service(\"StartLoadingService\", ['$localStorage', '$http', StartLoadingService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.loginservice {\n\n    'use strict';\n    import LoggingUser = app.home.nolog.LoggingUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class ResponseToken {\n        token: string;\n\n        constructor(token: string) {\n            this.token = token;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface ILoginService {\n        isLogged: boolean;\n        getIsLogged(): boolean;\n        loggedUser: string;\n        checkIfLogged(): boolean;\n        checkTokenSync(token: string): boolean;\n        login(user: LoggingUser): number;\n        logout(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class LoginService implements ILoginService {\n        isLogged: boolean = false;\n        loggedUser: string = undefined;\n\n        constructor(public $localStorage, public $cookies, public $window) {\n            console.log('Creating LoginService...');\n\n            this.isLogged = this.checkIfLogged();\n        }\n\n        getIsLogged(): boolean {\n            return this.isLogged;\n        }\n\n        public checkIfLogged(): boolean {\n            let isLoggedLocalStorage = this.$localStorage.isLogged;\n            let username = this.$localStorage.username;\n            let bearerCookie = this.$cookies.get('Bearer');\n\n            if (bearerCookie == null || isLoggedLocalStorage == null || username == null) {\n                console.log(\"Not logged \");\n                return false;\n            }\n\n            if (isLoggedLocalStorage != true) {\n                return false;\n            }\n\n            return this.checkTokenSync(bearerCookie);\n        }\n\n        public checkTokenSync(token: string): boolean {\n\n            if (token == null) {\n                return false;\n            }\n\n            let http = new XMLHttpRequest();\n            let url = '/api/authentication/validate';\n            http.open(\"POST\", url, false);\n            http.setRequestHeader('Content-Type', 'application/txt');\n\n            http.send(this.$cookies.get('Bearer'));\n\n            return http.status == 200;\n        }\n\n        login(user: LoggingUser): number {\n            let stringUser: string = JSON.stringify(user);\n            let http = new XMLHttpRequest();\n            let url = '/api/authentication/auth';\n            http.open(\"POST\", url, false);\n            http.setRequestHeader('Content-Type', 'application/json');\n\n            console.log(\"Logging in...\", stringUser);\n\n            http.send(stringUser);\n\n            if (http.status != 200) {\n                return http.status;\n            }\n\n            let obtainedToken: ResponseToken = JSON.parse(http.response);\n\n            this.$cookies.put('Bearer', obtainedToken.token);\n\n            this.isLogged = true;\n            this.$localStorage.isLogged = true;\n\n            this.loggedUser = user.username;\n            this.$localStorage.username = user.username;\n\n            console.log(user.username);\n\n            return http.status;\n        }\n\n        logout(): void {\n            this.$cookies.remove('Bearer');\n            this.$localStorage.isLogged = undefined;\n            this.$localStorage.username = undefined;\n            this.$window.location.href = '/';\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.loginservice', ['ngStorage', 'ngCookies'])\n        .service(\"LoginService\", ['$localStorage', '$cookies', '$window', LoginService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.home {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n    import ILoginService = app.loginservice.ILoginService;\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeCtrl {\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     CONTROLLER                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeCtrl implements IHomeCtrl {\n        constructor(public $scope: ng.IScope, public $cookies, public LoginService: ILoginService) {\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home', ['ngRoute', 'ngCookies', 'app.loginservice'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/', {\n                templateUrl: '../../views/home/home.html',\n                controller: HomeCtrl,\n                controllerAs: 'homeCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.home.nolog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class LoggingUser {\n        username: string;\n        password: string;\n\n        constructor(username: string, password: string) {\n            this.username = username;\n            this.password = password;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeNoLogCtrl {\n        login(): void;\n        usernameLogin: string;\n        passwordLogin: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeNoLogCtrl implements IHomeNoLogCtrl {\n        private usernameLogin: string = \"\";\n        private passwordLogin: string = \"\";\n\n        constructor(public LoginService: ILoginService, public $window, public growl) {\n        }\n\n        public login(): void {\n            let user = new LoggingUser(this.usernameLogin, this.passwordLogin);\n            console.log(user);\n\n            let result: number = this.LoginService.login(user);\n\n            console.log('Result of login is: ', result);\n\n            if(result != 200) {\n                if (result == 400) {\n                    this.growl.error(\"Invalid username or password!\");\n                }\n\n                if (result == 401) {\n                    this.growl.error(\"Your account has not been activated!\");\n                }\n\n                this.usernameLogin = \"\";\n            }\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.nolog', ['app.loginservice', 'angularSpinner', 'angular-growl'])\n        .directive('homeNoLogDirective', () => {\n            return {\n                templateUrl: '../../views/home/home_no_login.html',\n                controller: HomeNoLogCtrl,\n                controllerAs: 'homeNoLogCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 29/12/16.\n */\n\nmodule app.home.withlog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import CurrentUser = app.startloading.CurrentUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    // export class LoggingUser {\n    //     username: string;\n    //     password: string;\n    //\n    //     constructor(username: string, password: string) {\n    //         this.username = username;\n    //         this.password = password;\n    //     }\n    // }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeWithLogCtrl {\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeWithLogCtrl implements IHomeWithLogCtrl {\n\n        constructor(public LoginService: ILoginService, public StartLoadingService: IStartLoadingService, public $window) {\n            if(!this.StartLoadingService.informationLoaded) {\n                console.log('Loading user information...');\n                this.StartLoadingService.loadUserInfo(LoginService.loggedUser);\n            }\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.withlog', ['app.loginservice', 'app.startloading', 'angularSpinner'])\n        .directive('homeWithLogDirective', () => {\n            return {\n                templateUrl: '../../views/home/home_with_login.html',\n                controller: HomeWithLogCtrl,\n                controllerAs: 'homeWithLogCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 07/01/17.\n */\n\nmodule app.navbar {\n\n    'use strict';\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import ILoginService = app.loginservice.ILoginService;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface INavbarCtrl {\n        username: string;\n        activePage: string;\n\n        logout(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class NavbarCtrl implements INavbarCtrl {\n\n        activePage: string = undefined;\n        username: string = undefined;\n\n        constructor(public StartLoadingService: IStartLoadingService, public LoginService: ILoginService) {\n            this.username = this.StartLoadingService.loggedUserInfo.username;\n            this.activePage = window.location.href;\n        }\n\n        logout(): void {\n            this.LoginService.logout();\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.navbar', ['app.startloading', 'app.loginservice'])\n        .directive('navbarDirective', () => {\n            return {\n                templateUrl: '../../views/navbar/navbar.html',\n                controller: NavbarCtrl,\n                controllerAs: 'navbarCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 03/01/17.\n */\n\nmodule app.home.withlog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import CurrentUser = app.startloading.CurrentUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    // export class LoggingUser {\n    //     username: string;\n    //     password: string;\n    //\n    //     constructor(username: string, password: string) {\n    //         this.username = username;\n    //         this.password = password;\n    //     }\n    // }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IStartPageCtrl {\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class StartPageCtrl implements IStartPageCtrl {\n\n        constructor(public LoginService: ILoginService, public StartLoadingService: IStartLoadingService, public $window) {\n\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.startpage', ['app.loginservice', 'app.startloading', 'angularSpinner'])\n        .directive('startPageDirective', () => {\n            return {\n                templateUrl: '../../views/startPage/startPage.html',\n                controller: StartPageCtrl,\n                controllerAs: 'startPageCtrl'\n            };\n        });\n}\n"]}