{"version":3,"sources":["account/account_controller.ts","app/app.ts","app/excursion_service.ts","app/load_starting_info_service.ts","app/login_service.ts","app/settings_service.ts","home/home.ts","home/home_no_login.ts","home/home_with_login.ts","navbar/navbar_controller.ts","search/search_controller.ts","myexcursions/myexcursions_controller.ts","settings/settings_controller.ts","startPage/start_page.ts","templates.ts"],"names":["app","account","AccountCtrl","$scope","LoginService","StartLoadingService","this","loggedUser","undefined","loggedUserInfo","informationLoaded","loadingImage","console","log","loadUserInfo","angular","module","config","$routeProvider","when","templateUrl","controller","controllerAs","$translateProvider","$locationProvider","useSanitizeValueStrategy","translations","LANGUAGE_TITLE","SETTINGS","HOME_NAV","SEARCH_NAV","ACCOUNT_NAV","SETTINGS_NAV","LOGOUT_NAV","LOGGED_AS_NAV","preferredLanguage","html5Mode","hashPrefix","excursions","excursions_1","Excursion","ExcursionService","Upload","$localStorage","$http","myExcursions","areMyExcursionsAlreadyLoaded","getMyExcursions","prototype","loadExcursion","fileIn","titleIn","descriptionIn","placeIn","peopleIn","upload","url","method","file","dataUrltoBlob","fields","title","description","place","people","username","then","response","data","_this","get","_i","myExcursions_1","length","excursion","push","searchExcursions","args","http","XMLHttpRequest","open","setRequestHeader","send","JSON","parse","service","startloading","CurrentUser","navigator","geolocation","getCurrentPosition","setLocations","bind","position","longitude","coords","latitude","sleep","miliseconds","currentTime","Date","getTime","loginservice","ResponseToken","token","$cookies","$window","isLogged","checkIfLogged","getIsLogged","isLoggedLocalStorage","bearerCookie","checkTokenSync","status","login","user","stringUser","stringify","obtainedToken","put","logout","remove","location","href","settings","SettingsService","$translate","language","changeLanguage","use","lang","home","HomeCtrl","nolog","LoggingUser","password","HomeNoLogCtrl","growl","usernameLogin","passwordLogin","isInRegistrationPage","result","error","register","goToRegistration","goToLogin","directive","withlog","HomeWithLogCtrl","navbar","NavbarCtrl","activePage","window","search","SearchCtrl","NgMap","isDisplayingResults","excursionsResult","pop","searchString","foundExcursion","foundExcursion_1","goBack","myexcursions","ExcursionsCtrl","displayedExcursion","isDisplayingExcursion","targetPlace","targetPeople","croppedDataUrl","isAddingExcursion","goToAddingPage","addExcursion","showProductInfo","goBackFromExcursion","settingsctrl","SettingsCtrl","StartPageCtrl","run","$templateCache"],"mappings":"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","file":"app.min.js","sourcesContent":["/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.account {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n    import ILoginService = app.loginservice.ILoginService;\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import CurrentUser = app.startloading.CurrentUser;\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IAccountCtrl {\n        loggedUser: CurrentUser;\n\n        loadingImage: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     CONTROLLER                    //\n    ///////////////////////////////////////////////////////\n\n    export class AccountCtrl implements IAccountCtrl {\n        loadingImage: string;\n        loggedUser: app.startloading.CurrentUser = undefined;\n\n        constructor(public $scope: ng.IScope,\n                    public LoginService: ILoginService,\n                    public StartLoadingService: IStartLoadingService) {\n            this.loggedUser = this.StartLoadingService.loggedUserInfo;\n\n            if(!this.StartLoadingService.informationLoaded) {\n                this.loadingImage = 'dist/images/s3X06zT.jpg';\n\n                console.log('Loading user information...');\n                this.StartLoadingService.loadUserInfo(LoginService.loggedUser)\n            }\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.account', ['ngRoute', 'app.loginservice', 'app.startloading'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/account', {\n                templateUrl: '../../views/account/account.html',\n                controller: AccountCtrl,\n                controllerAs: 'accountCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\nangular.module('imsFrontendApp', [\n    'app.home',\n    'app.home.nolog',\n    'app.home.withlog',\n    'app.loginservice',\n    'app.startloading',\n    'app.home.startpage',\n    'app.navbar',\n    'app.search',\n    'app.account',\n    'app.myexcursions',\n    'app.settings',\n    'app.settingsctrl',\n    'app.excursions',\n    'ngRoute',\n    'pascalprecht.translate',\n    'ngSanitize'\n]).config(($translateProvider, $locationProvider) => {\n    $translateProvider.useSanitizeValueStrategy('sanitize');\n    $translateProvider.translations('English', {\n        // settings page\n        'LANGUAGE_TITLE': 'Language',\n        'SETTINGS': 'Settings',\n\n        // navbar\n        'HOME_NAV': 'Home',\n        'SEARCH_NAV': 'Search',\n        'ACCOUNT_NAV': 'Account',\n        'SETTINGS_NAV': 'Settings',\n        'LOGOUT_NAV': 'Logout',\n        'LOGGED_AS_NAV': 'Logged as'\n    });\n    $translateProvider.translations('Italiano', {\n        // settings page\n        'LANGUAGE_TITLE': 'Lingua',\n        'SETTINGS': 'Impostazioni',\n\n        // navbar\n        'HOME_NAV': 'Home',\n        'SEARCH_NAV': 'Cerca',\n        'ACCOUNT_NAV': 'Profilo',\n        'SETTINGS_NAV': 'Impostazioni',\n        'LOGOUT_NAV': 'Logout',\n        'LOGGED_AS_NAV': 'Loggato come'\n    });\n    $translateProvider.preferredLanguage('English');\n\n    $locationProvider.html5Mode(false).hashPrefix('');\n});","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 11/01/16.\n */\n\nmodule app.excursions {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class Excursion {\n        id: number;\n        image: string;\n        insertionDate: Date;\n        likes: number;\n        longDescription: string;\n        peopleTarget: string;\n        placeTarget: string;\n        title: string;\n        username: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IExcursionService {\n        loadExcursion(file, title, description, place, people): void;\n\n        getMyExcursions(): void;\n\n        searchExcursions(args: string): Array<Excursion>;\n\n        myExcursions: Array<Excursion>;\n\n        // cache the excursions in the local service\n        areMyExcursionsAlreadyLoaded: boolean;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class ExcursionService implements IExcursionService {\n\n        myExcursions: Array<app.excursions.Excursion> = [];\n        areMyExcursionsAlreadyLoaded: boolean = false;\n\n        constructor(public Upload, public $localStorage, public $http) {\n            this.getMyExcursions();\n        }\n\n        loadExcursion(fileIn, titleIn, descriptionIn, placeIn, peopleIn): void {\n            this.Upload.upload({\n                url: '/api/excursion/add',\n                method: 'POST',\n                file: this.Upload.dataUrltoBlob(fileIn, \"image\"),\n                fields: {\n                    'title': titleIn,\n                    'description': descriptionIn,\n                    'place': placeIn,\n                    'people': peopleIn,\n                    'username': this.$localStorage.username\n                }\n            }).then((response) => {\n                console.log(response.data);\n            });\n        }\n\n        getMyExcursions(): void {\n            if(!this.areMyExcursionsAlreadyLoaded) {\n                let url = '/api/excursion/myexcursions?username=' + this.$localStorage.username;\n                console.log(url);\n                this.$http.get(url).then((response) => {\n                    let myExcursions: Array<app.excursions.Excursion> = response.data;\n                    for(let excursion of myExcursions) {\n                        this.myExcursions.push(excursion);\n                    }\n                    this.areMyExcursionsAlreadyLoaded = true;\n                }, function (response) {\n                    console.log('Error', response);\n                });\n            }\n        }\n\n        searchExcursions(args: string): Array<Excursion> {\n\n            let url = '/api/excursion/search?title=' + args;\n            console.log(url);\n\n            let http = new XMLHttpRequest();\n            http.open(\"GET\", url, false);\n            http.setRequestHeader('Content-Type', 'application/txt');\n\n            http.send();\n\n            let excursions: Array<Excursion> = JSON.parse(http.response);\n\n            return excursions;\n        }\n\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.excursions', ['ngFileUpload'])\n        .service(\"ExcursionService\", ['Upload', '$localStorage', '$http', ExcursionService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.startloading {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class CurrentUser {\n        username: string;\n        name: string;\n        surname: string;\n        dateOfBirth: Date;\n        country: string;\n        city: string;\n        picture: string;\n        gender: boolean;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IStartLoadingService {\n        loadUserInfo(username: string): void;\n        loggedUserInfo: CurrentUser;\n        informationLoaded: boolean;\n\n        longitude: number;\n        latitude: number;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class StartLoadingService implements IStartLoadingService {\n\n        longitude: number;\n        latitude: number;\n\n        informationLoaded: boolean = false;\n\n        loggedUserInfo: app.startloading.CurrentUser = undefined;\n\n        constructor(public $localStorage, public $http) {\n            console.log('Creating StartLoadingService...');\n\n            navigator.geolocation.getCurrentPosition(this.setLocations.bind(this));\n        }\n\n        setLocations(position): void {\n            this.longitude = position.coords.longitude;\n            this.latitude = position.coords.latitude;\n        }\n\n        sleep(miliseconds: number): void {\n            var currentTime = new Date().getTime();\n            while (currentTime + miliseconds >= new Date().getTime()) {\n            }\n            this.informationLoaded = true;\n        }\n\n        loadUserInfo(username: string): void {\n            let url = '/api/account/user?username=' + this.$localStorage.username;\n            console.log(url);\n            this.$http.get(url).then((response) => {\n                this.loggedUserInfo = response.data;\n                this.sleep(2000);\n            }, function (response) {\n                console.log('Error', response);\n            });\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.startloading', [])\n        .service(\"StartLoadingService\", ['$localStorage', '$http', StartLoadingService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.loginservice {\n\n    'use strict';\n    import LoggingUser = app.home.nolog.LoggingUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class ResponseToken {\n        token: string;\n\n        constructor(token: string) {\n            this.token = token;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface ILoginService {\n        isLogged: boolean;\n        getIsLogged(): boolean;\n        loggedUser: string;\n        checkIfLogged(): boolean;\n        checkTokenSync(token: string): boolean;\n        login(user: LoggingUser): number;\n        logout(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class LoginService implements ILoginService {\n        isLogged: boolean = false;\n        loggedUser: string = undefined;\n\n        constructor(public $localStorage, public $cookies, public $window) {\n            console.log('Creating LoginService...');\n\n            this.isLogged = this.checkIfLogged();\n        }\n\n        getIsLogged(): boolean {\n            return this.isLogged;\n        }\n\n        public checkIfLogged(): boolean {\n            let isLoggedLocalStorage = this.$localStorage.isLogged;\n            let username = this.$localStorage.username;\n            let bearerCookie = this.$cookies.get('Bearer');\n\n            if (bearerCookie == null || isLoggedLocalStorage == null || username == null) {\n                console.log(\"Not logged \");\n                return false;\n            }\n\n            if (isLoggedLocalStorage != true) {\n                return false;\n            }\n\n            return this.checkTokenSync(bearerCookie);\n        }\n\n        public checkTokenSync(token: string): boolean {\n\n            if (token == null) {\n                return false;\n            }\n\n            let http = new XMLHttpRequest();\n            let url = '/api/authentication/validate';\n            http.open(\"POST\", url, false);\n            http.setRequestHeader('Content-Type', 'application/txt');\n\n            http.send(this.$cookies.get('Bearer'));\n\n            return http.status == 200;\n        }\n\n        login(user: LoggingUser): number {\n            let stringUser: string = JSON.stringify(user);\n            let http = new XMLHttpRequest();\n            let url = '/api/authentication/auth';\n            http.open(\"POST\", url, false);\n            http.setRequestHeader('Content-Type', 'application/json');\n\n            console.log(\"Logging in...\", stringUser);\n\n            http.send(stringUser);\n\n            if (http.status != 200) {\n                return http.status;\n            }\n\n            let obtainedToken: ResponseToken = JSON.parse(http.response);\n\n            this.$cookies.put('Bearer', obtainedToken.token);\n\n            this.isLogged = true;\n            this.$localStorage.isLogged = true;\n\n            this.loggedUser = user.username;\n            this.$localStorage.username = user.username;\n\n            console.log(user.username);\n\n            return http.status;\n        }\n\n        logout(): void {\n            this.$cookies.remove('Bearer');\n            this.$localStorage.isLogged = undefined;\n            this.$localStorage.username = undefined;\n            this.$window.location.href = '/';\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.loginservice', ['ngStorage', 'ngCookies'])\n        .service(\"LoginService\", ['$localStorage', '$cookies', '$window', LoginService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 10/01/16.\n */\n\nmodule app.settings {\n\n    'use strict';\n    import LoggingUser = app.home.nolog.LoggingUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    // export class ResponseToken {\n    //     token: string;\n    //\n    //     constructor(token: string) {\n    //         this.token = token;\n    //     }\n    // }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface ISettingsService {\n        changeLanguage(lang: string): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                      SERVICE                      //\n    ///////////////////////////////////////////////////////\n\n    export class SettingsService implements ISettingsService {\n\n        constructor(public $localStorage, public $cookies, public $window, public $translate) {\n            let language = this.$localStorage.language;\n\n            if (language == undefined) {\n                this.changeLanguage(\"English\");\n            } else {\n                this.$translate.use(language);\n            }\n        }\n\n        changeLanguage(lang: string): void {\n            this.$translate.use(lang);\n            this.$localStorage.language = lang;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.settings', ['ngStorage', 'ngCookies', 'pascalprecht.translate'])\n        .service(\"SettingsService\", ['$localStorage', '$cookies', '$window', '$translate', SettingsService]);\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.home {\n\n    'use strict';\n    import LoginService = app.loginservice.LoginService;\n    import ILoginService = app.loginservice.ILoginService;\n    import ISettingsService = app.settings.ISettingsService;\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeCtrl {\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     CONTROLLER                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeCtrl implements IHomeCtrl {\n        constructor(public $scope: ng.IScope,\n                    public $cookies,\n                    public LoginService: ILoginService,\n                    public SettingsService: ISettingsService) {\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home', ['ngRoute', 'ngCookies', 'app.loginservice', 'app.settings'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/', {\n                templateUrl: '../../views/home/home.html',\n                controller: HomeCtrl,\n                controllerAs: 'homeCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 27/12/16.\n */\n\nmodule app.home.nolog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    export class LoggingUser {\n        username: string;\n        password: string;\n\n        constructor(username: string, password: string) {\n            this.username = username;\n            this.password = password;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeNoLogCtrl {\n        login(): void;\n        register(): void;\n\n        // login fields\n        usernameLogin: string;\n        passwordLogin: string;\n\n        // registration fields\n        usernameRegistration: string;\n        nameRegistration: string;\n        surnameRegistration: string;\n        passwordRegistration: string;\n        passwordConfirmRegistration: string;\n        cityRegistration: string;\n        stateRegistration: string;\n        dateRegistration: Date;\n        genderRegistration: boolean;\n\n        // navigation\n        isInRegistrationPage: boolean;\n        goToRegistration(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeNoLogCtrl implements IHomeNoLogCtrl {\n\n        // login\n        private usernameLogin: string = \"\";\n        private passwordLogin: string = \"\";\n        private isInRegistrationPage: boolean = false;\n\n        // registration\n        usernameRegistration: string;\n        nameRegistration: string;\n        surnameRegistration: string;\n        passwordRegistration: string;\n        passwordConfirmRegistration: string;\n        cityRegistration: string;\n        stateRegistration: string;\n        dateRegistration: Date;\n        genderRegistration: boolean;\n\n        constructor(public LoginService: ILoginService, public $window, public growl) {\n        }\n\n        public login(): void {\n            let user = new LoggingUser(this.usernameLogin, this.passwordLogin);\n            console.log(user);\n\n            let result: number = this.LoginService.login(user);\n\n            console.log('Result of login is: ', result);\n\n            if(result != 200) {\n                if (result == 400) {\n                    this.growl.error(\"Invalid username or password!\");\n                }\n\n                if (result == 401) {\n                    this.growl.error(\"Your account has not been activated!\");\n                }\n\n                this.usernameLogin = \"\";\n            }\n        }\n\n        public register(): void {\n\n        }\n\n        public goToRegistration(): void {\n            this.isInRegistrationPage = true;\n        }\n\n        public goToLogin(): void {\n            this.isInRegistrationPage = false;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.nolog', ['app.loginservice', 'angularSpinner', 'angular-growl'])\n        .directive('homeNoLogDirective', () => {\n            return {\n                templateUrl: '../../views/home/home_no_login.html',\n                controller: HomeNoLogCtrl,\n                controllerAs: 'homeNoLogCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 29/12/16.\n */\n\nmodule app.home.withlog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import CurrentUser = app.startloading.CurrentUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    // export class LoggingUser {\n    //     username: string;\n    //     password: string;\n    //\n    //     constructor(username: string, password: string) {\n    //         this.username = username;\n    //         this.password = password;\n    //     }\n    // }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IHomeWithLogCtrl {\n        loadingImage: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class HomeWithLogCtrl implements IHomeWithLogCtrl {\n\n        loadingImage: string = undefined;\n\n        constructor(public LoginService: ILoginService, public StartLoadingService: IStartLoadingService, public $window) {\n            if(!this.StartLoadingService.informationLoaded) {\n                console.log('Loading user information...');\n                this.StartLoadingService.loadUserInfo(this.LoginService.loggedUser);\n            }\n            this.loadingImage = 'dist/images/s3X06zT.jpg';\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.withlog', ['app.loginservice', 'app.startloading', 'angularSpinner'])\n        .directive('homeWithLogDirective', () => {\n            return {\n                templateUrl: '../../views/home/home_with_login.html',\n                controller: HomeWithLogCtrl,\n                controllerAs: 'homeWithLogCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 07/01/17.\n */\n\nmodule app.navbar {\n\n    'use strict';\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import ILoginService = app.loginservice.ILoginService;\n    import ISettingsService = app.settings.ISettingsService;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface INavbarCtrl {\n        username: string;\n        activePage: string;\n\n        logout(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class NavbarCtrl implements INavbarCtrl {\n\n        activePage: string = undefined;\n        username: string = undefined;\n\n        constructor(public StartLoadingService: IStartLoadingService,\n                    public LoginService: ILoginService,\n                    public SettingsService: ISettingsService) {\n            this.username = this.StartLoadingService.loggedUserInfo.username;\n            this.activePage = window.location.href;\n        }\n\n        logout(): void {\n            this.LoginService.logout();\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.navbar', ['app.startloading', 'app.loginservice', 'app.settings'])\n        .directive('navbarDirective', () => {\n            return {\n                templateUrl: '../../views/navbar/navbar.html',\n                controller: NavbarCtrl,\n                controllerAs: 'navbarCtrl'\n            };\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 07/01/17.\n */\n\nmodule app.search {\n\n    'use strict';\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import ILoginService = app.loginservice.ILoginService;\n    import ISettingsService = app.settings.ISettingsService;\n    import IExcursionService = app.excursions.IExcursionService;\n    import Excursion = app.excursions.Excursion;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface ISearchCtrl {\n        longitude: number;\n        latitude: number;\n\n        loadingImage: string;\n\n        searchString: string;\n\n        excursionsResult: Array<Excursion>;\n\n        searchExcursions(): void;\n\n        isDisplayingResults: boolean;\n\n        goBack(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class SearchCtrl implements ISearchCtrl {\n        isDisplayingResults: boolean = false;\n        excursionsResult: Array<app.excursions.Excursion> = [];\n        searchString: string;\n        longitude: number;\n        latitude: number;\n\n        loadingImage: string = undefined;\n\n        constructor(public StartLoadingService: IStartLoadingService,\n                    public LoginService: ILoginService,\n                    public NgMap,\n                    public SettingsService: ISettingsService,\n                    public ExcursionService: IExcursionService) {\n\n            if(!this.StartLoadingService.informationLoaded) {\n                console.log('Loading user information...');\n            }\n\n            this.longitude = this.StartLoadingService.latitude;\n            this.latitude = this.StartLoadingService.longitude;\n\n            this.loadingImage = 'dist/images/s3X06zT.jpg';\n        }\n\n        searchExcursions(): void {\n            while(this.excursionsResult.length > 0) {\n                this.excursionsResult.pop();\n            }\n\n            console.log(this.searchString);\n\n            let foundExcursion: Array<Excursion> = this.ExcursionService.searchExcursions(this.searchString);\n\n            for(let excursion of foundExcursion) {\n                console.log(excursion);\n                this.excursionsResult.push(excursion);\n            }\n\n            this.isDisplayingResults = true;\n        }\n\n        goBack(): void {\n            this.isDisplayingResults = false;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.search', ['app.startloading', 'app.loginservice', 'ngMap', 'angularSpinner', 'app.settings', 'app.excursions'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/search', {\n                templateUrl: '../../views/testsearchpage/searchpage.html',\n                controller: SearchCtrl,\n                controllerAs: 'searchCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 10/01/17.\n */\n\nmodule app.myexcursions {\n\n    'use strict';\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import ILoginService = app.loginservice.ILoginService;\n    import IExcursionService = app.excursions.IExcursionService;\n    import Excursion = app.excursions.Excursion;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IExcursionsCtrl {\n        isAddingExcursion: boolean;\n\n        goToAddingPage(): void;\n        goBack(): void;\n\n        addExcursion(): void;\n\n        title: string;\n        description: string;\n        targetPlace: string;\n        targetPeople: string;\n        position: string;\n\n        croppedDataUrl: any;\n\n        myExcursions: Array<Excursion>;\n\n        showProductInfo(excursion: Excursion): void;\n\n        isDisplayingExcursion: boolean;\n        displayedExcursion: Excursion;\n        goBackFromExcursion(): void;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class ExcursionsCtrl implements IExcursionsCtrl {\n        displayedExcursion: app.excursions.Excursion = undefined;\n        isDisplayingExcursion: boolean = false;\n\n        myExcursions: Array<Excursion> = [];\n\n        title: string = undefined;\n        description: string = undefined;\n        targetPlace: string = undefined;\n        targetPeople: string = undefined;\n        position: string = undefined;\n\n        isAddingExcursion: boolean;\n\n        croppedDataUrl: any = undefined;\n\n        constructor(public StartLoadingService: IStartLoadingService,\n                    public LoginService: ILoginService,\n                    public ExcursionService: IExcursionService) {\n            this.isAddingExcursion = false;\n\n            console.log(this.ExcursionService);\n\n            this.myExcursions = this.ExcursionService.myExcursions;\n        }\n\n        goToAddingPage(): void {\n            this.isAddingExcursion = true;\n        }\n\n        goBack(): void {\n            this.isAddingExcursion = false;\n        }\n\n        addExcursion(): void {\n\n            console.log(this.title);\n\n            this.ExcursionService.loadExcursion(this.croppedDataUrl,\n                this.title,\n                this.description,\n                this.targetPlace,\n                this.targetPeople);\n        }\n\n        showProductInfo(excursion: app.excursions.Excursion): void {\n            this.isDisplayingExcursion = true;\n            this.displayedExcursion = excursion;\n        }\n\n        goBackFromExcursion(): void {\n            this.isDisplayingExcursion = false;\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.myexcursions', ['app.startloading', 'app.loginservice', 'ngFileUpload', 'ngImgCrop', 'app.excursions'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/myexcursions', {\n                templateUrl: '../../views/myexcursions/myexcursion.html',\n                controller: ExcursionsCtrl,\n                controllerAs: 'excursionsCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 07/01/17.\n */\n\nmodule app.settingsctrl {\n\n    'use strict';\n    import ISettingsService = app.settings.ISettingsService;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface ISettingsCtrl {\n        changeLanguage(): void;\n        language: string;\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class SettingsCtrl implements ISettingsCtrl {\n        language: string;\n\n        constructor(public SettingsService: ISettingsService) {\n        }\n\n        changeLanguage(): void {\n            this.SettingsService.changeLanguage(this.language);\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.settingsctrl', ['app.settings'])\n        .config(($routeProvider) => {\n            $routeProvider.when('/settings', {\n                templateUrl: '../../views/settings/settings.html',\n                controller: SettingsCtrl,\n                controllerAs: 'settingsCtrl'\n            })\n        });\n}\n","/// <reference path=\"../../../typings/index.d.ts\" />\n\n/**\n * Created by fabriziomicheloni on 03/01/17.\n */\n\nmodule app.home.withlog {\n\n    'use strict';\n    import ILoginService = app.loginservice.ILoginService;\n    import IStartLoadingService = app.startloading.IStartLoadingService;\n    import CurrentUser = app.startloading.CurrentUser;\n\n    ///////////////////////////////////////////////////////\n    //                       MODELS                      //\n    ///////////////////////////////////////////////////////\n\n    // export class LoggingUser {\n    //     username: string;\n    //     password: string;\n    //\n    //     constructor(username: string, password: string) {\n    //         this.username = username;\n    //         this.password = password;\n    //     }\n    // }\n\n    ///////////////////////////////////////////////////////\n    //                     INTERFACES                    //\n    ///////////////////////////////////////////////////////\n\n    export interface IStartPageCtrl {\n    }\n\n    ///////////////////////////////////////////////////////\n    //                    CONTROLLERS                    //\n    ///////////////////////////////////////////////////////\n\n    export class StartPageCtrl implements IStartPageCtrl {\n\n        constructor(public LoginService: ILoginService, public StartLoadingService: IStartLoadingService, public $window) {\n\n        }\n    }\n\n    ///////////////////////////////////////////////////////\n    //                       ANGULAR                     //\n    ///////////////////////////////////////////////////////\n\n    angular\n        .module('app.home.startpage', ['app.loginservice', 'app.startloading', 'angularSpinner'])\n        .directive('startPageDirective', () => {\n            return {\n                templateUrl: '../../views/startPage/startPage.html',\n                controller: StartPageCtrl,\n                controllerAs: 'startPageCtrl'\n            };\n        });\n}\n",null]}